---
title: "[R OBJECTS]{.r-fit-text}"
subtitle: "[Dr. Ajay Kumar Koli, PhD | SARA Institute of Data Science, India]{.r-fit-text}"
format: 
  revealjs:
    background-transition: convex
    execute: 
      echo: true
controls: true
slide-number: true
scrollable: true
logo: images/logo-sara.png
#bibliography: references.bib
theme: style.scss
title-slide-attributes: 
  data-background-image: "https://images.unsplash.com/photo-1619153041153-65c8e78e4710?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
  data-background-size: cover
  data-background-color: black
  data-background-opacity: "0.7"
  #data-background-repeat: yes
---

# R Objects {background-image=images/heartyr.gif background-position=right background-size=50% background-color=black visibility=hidden}

<br>

::: aside
Artwork by [Alision Horst](https://allisonhorst.com/)
:::

## R Object

- In R, **everything you create or work with is stored as an object.**

- Objects can be numbers, text, data tables, functions, or even plots.

- Think of an object as a **named container** that stores information in your R environment.

## Common Types of R Objects

1. Vector – a sequence of values (same type)

```{r}
numbers <- c(1, 2, 3, 4, 5)     # Numeric vector

names <- c("Asha", "Raj", "Zara")  # Character vector

names
```

. . .

<br>

::: {.callout-caution icon=false title="Curious Candy 🍬🍭🍬 "}
*Why are we not seeing numbers in the results?*
:::

## Common Types of R Objects

2. Matrix – 2D table of numbers

```{r}
mymatrix <- matrix(1:6, nrow = 2)

mymatrix
```

## Common Types of R Objects

3. Data Frame – table with rows and columns (like Excel)

```{r}
mydata <- data.frame(
  Name = c("Ali", "Beena"),
  Age = c(25, 30)
)

```

. . .

<br>

```{r}
mydata
```


## Common Types of R Objects

4. List – collection of different types of objects

    - A list can contain vectors, numbers, strings, even other lists.
    
. . .    

```{r}
mylist <- list(name = "Sara", scores = c(90, 85, 88), passed = TRUE)

mylist
```

## Common Types of R Objects

5. Function – reusable set of instructions

```{r}
add <- function(x, y) {
  return(x + y)
}

add(3, 4)   # Output: 7
```

## 💡Guidelines to "name" R Objects: {background-color=teal}

-   A name cannot start with a number.

-   A name cannot use some special symbols, like `^`, `!`, `$`, `@`, `+`, `-`, `/`, or `*`,`:`.

-   Avoid caps.

-   Avoid space.

-   Use dash (like weight-kg) or underscore (like weight_kg).

-   If chronology matters then add date (2020-09-05-file-name).

## 🤯 Your Turn: Create this dataset {background-color=brown} 

![](practice/images/data-frame.png)

## 🤩 Your Turn Answer {background-color=seagreen}

![](practice/images/data-frame-ans.png)


## Create Object

::: panel-tabset
### Code

```{r}
#| label: age
#| eval: false

age <- c(23, 25, 16, 40, 34)

age
```

### Output

```{r}
#| label: age
#| output: asis
#| echo: false 
```
:::

## Assignment Operator

<br>

::: {.callout-important}
R assignment operators: Assignment operators are used to assign values to variables.

`object_name <- c(2, 3, 4, 5)`

`object_name` 
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: income
#| eval: false
income <- c(23000, 25000, 16000, 4000, 34000)

income
```

### Output

```{r}
#| label: income
#| output: asis
#| echo: false 
```
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: name
#| eval: false
name <- c("Bhim", "Rama", "Sara", "Phule", "Savitri")

name
```

### Output

```{r}
#| label: name
#| output: asis
#| echo: false 
```
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: place
#| eval: false
place <- c("MH", "RJ", "DL", "HR", "HR")

place
```

### Output

```{r}
#| label: place
#| output: asis
#| echo: false 
```
:::

## Create object

::: panel-tabset
### Code

```{r}
#| label: weight
#| eval: false
weight_kg <- c(50, 52, 61, 40, 70)

weight_kg
```

### Output

```{r}
#| label: weight
#| output: asis
#| echo: false 
```
:::

## RStudio Environment Window

<br>

![](images/rstd-env.png){fig-align=center}

## Basic Object Types 

<br>

| Type        | Description              | Example           |
| ----------- | ------------------------ | ----------------- |
| `numeric`   | Numbers (floating point) | `3.14`, `2`, `-5` |
| `integer`   | Whole numbers            | `2L`, `100L`      |
| `character` | Text strings             | `"R is great"`    |
| `logical`   | Boolean values           | `TRUE`, `FALSE`   |

## 🤔 How to combine all these objects and form a data set?

👇 Something Like This 😻😻

<br>

```{r}
#| echo: false

example_df <- data.frame(name, income, age, place, weight_kg)

example_df
```

## How to create a data object?

::: panel-tabset
### Code

```{r}
#| label: df
#| eval: false
example_df <- data.frame(name, income, age, place, weight_kg)

example_df
```

### Output

```{r}
#| label: df
#| output: true
#| echo: false 
```
:::

## Export data as a `csv` file

::: panel-tabset
### Code

```{r}
#| label: export-csv
#| eval: false

library(readr)

# create a folder in wd & name it "data"
write_csv(example_df, "data/example_df.csv") 
```

### Output

```{r}
#| label: export-csv
#| output: asis
#| echo: false 
```

To see the created file, check the "data" folder in your working directory.
:::

## List of all objects

::: panel-tabset
### Code

```{r}
#| label: objects-list
#| eval: false

objects()
```

### Output

```{r}
#| label: objects-list
#| output: asis
#| echo: false 
```
:::

# R Comments {background-image=images/stormyr.gif background-position=right background-size=35% background-color=black }

<br>

::: aside
Artwork by [Alision Horst](https://allisonhorst.com/)
:::

## Comment:

- Writing **comments** in R code (or any programming language) is essential for making your code **understandable, maintainable, and collaborative.** 

- Comments are lines in the code that are not executed; they’re used to **explain what the code does, why certain decisions were made, and how to use or modify the code.**

## How to Write Comments in R

- Use `#` to begin a comment.

- R ignores everything after the `#` on that line.

. . .

```{r}
# This is a comment

x <- 5  # This sets x to 5
```


## Why Comments Are Important in R

(@) **Improves Readability**
    - Helps you and others understand the logic quickly, especially after some time.

(@) **Supports Collaboration**
    - Team members can follow your logic and contribute more easily.

(@) **Eases Debugging and Maintenance**
    - Clear comments make it easier to find and fix issues or update code.

(@) **Documents Assumptions and Logic**
    - Explains why certain steps are performed in a specific way.
    
## Examples

:::: {.columns}

::: {.column width="50%"}
🛑 Bad Practice: No Comments

```{r}
#| eval: false
#| echo: fenced

a <- read.csv("data.csv")
b <- a[a$score > 80, ]
c <- mean(b$score)
```

🙁 This code works, but it's not clear what it's doing or why.
:::

::: {.column width="50%"}

✅ Better Version With Comments

```{r}
#| echo: fenced
#| eval: false

# Read data from CSV file
data <- read.csv("data.csv")

# Filter rows where score is greater than 80
high_scores <- data[data$score > 80, ]

# Calculate average of the high scores
avg_score <- mean(high_scores$score)
```


:::

::::

# RStats <br> Community {background-image=images/breakr.gif background-position=right background-size=35% background-color=black }

<br>

::: aside
Artwork by [Alision Horst](https://allisonhorst.com/)
:::

## Help using console `>`

> in console type `?your query`

-   for example `?knitr`.

-   for example `?mtcars`.

-   for example `?dplyr`.

## RStudio: Package website {.center}

<br>

![](images/help-cran.png){fig-align=center}

## [Posit community](https://community.rstudio.com/latest) {.center}

![](images/help-posit.png){fig-align=center}

## [Stack Overflow](https://stackoverflow.com/) {.center}

![](images/help-stack.png){fig-align=center}

## [GitHub](https://github.com/) {.center}

![](images/help-git.png){fig-align=center}

## Social media #RStats

![](images/code_hero.jpg){fig-align="center" width=55% }

::: aside
Artwork by [Alision Horst](https://allisonhorst.com/)
:::

# {.center visibility=hidden}

[🧑🏽‍💻👨🏽‍💻<br>Question & Answer]{.r-fit-text}

